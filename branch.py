from dataclasses import dataclass
from typing import List, Union

from char import Character
from repeat import FiniteRepeat

@dataclass(frozen=True)
class Branch:
    branches: List

    @property
    def starriness(self) -> int:
        return max(b.starriness for b in self.branches)

    def __repr__(self) -> str:
        middle = " | ".join(str(b) for b in self.branches)
        return f"BR( {middle} )"


def make_branch(branches: List) -> Union[Branch, FiniteRepeat, Character]:
    if any(not b for b in branches):
        # (ab|cd|) -> (ab|cd)?
        non_empty_branches = [b for b in branches if b]
        if non_empty_branches:
            return FiniteRepeat(
                make_branch(non_empty_branches),
                0, 1
            )
        return None
    if len(branches) == 1:
        return branches[0]
    if all(isinstance(b, Character) for b in branches):
        # (a|b) -> [ab]
        c = None
        for b in branches:
            c |= b
        return c

    return Branch(branches)