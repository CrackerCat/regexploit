from sre_parse import parse as sre_parse

from redos import find_redos
from sequence import Sequence
from sre import SreOpParser

def from_regex(pattern: str) -> Sequence:
    repeat = SreOpParser.sequence_or_singleton(sre_parse(pattern))
    return repeat

def found(pattern: str):
    redos = []
    for r in find_redos(from_regex(pattern)):
        print(r)
        if r not in redos:
            redos.append(r)
    return sorted(redos, key=lambda r: -r.starriness)

def test_no_repeats():
    assert len(found(r'aaaaa[abc](\w[\wz]){1,7}X[^x]')) == 0

def test_simple_repeat1():
    (r,) = found(r'abd\w*[def]\w+[de]!')
    assert r.starriness == 2
    assert r.repeated_character == from_regex('[de]')
    assert r.example_prefix == 'abd'
    assert r.killer is None

def test_simple_repeat2():
    rs = found(r'\w*x0*\d*\.?\d\.?\d+4')
    assert len(rs)
    r = rs[0]
    assert r.starriness == 3
    assert r.repeated_character == from_regex('0')
    assert r.example_prefix == 'x'
    assert r.killer is None

def test_simple_best_repeat():
    rs = found(r'\d*0*\d*x?\dx?\d+4')
    assert len(rs) > 1
    a = rs[0]
    assert a.starriness == 4
    assert a.repeated_character == from_regex('0')
    assert a.example_prefix == ''
    assert a.killer is None
    assert rs[1].starriness == 3

def test_backtrack():
    rs = found(r'[abc]+\w+[ab]+b')
    r = rs[0]
    assert r.starriness == 3
    assert r.sequence_start == 0
    assert r.backtrack_at == 3
    assert r.killer == from_regex('[^b]')