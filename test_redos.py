import re

from redos import find_redos
from sequence import Sequence
from sre import SreOpParser


def from_regex(pattern: str, flags: int = 0) -> Sequence:
    return SreOpParser.parse_sre(pattern, flags)


def found(pattern: str, flags: int = 0):
    redos = []
    for r in find_redos(from_regex(pattern, flags)):
        print(r)
        if r not in redos:
            redos.append(r)
    return sorted(redos, key=lambda r: -r.starriness * 1000 + len(r.example_prefix))


def test_no_repeats():
    assert len(found(r"aaaaa[abc](\w[\wz]){1,7}X[^x]")) == 0


def test_simple_repeat1():
    (r,) = found(r"abd\w*[def]\w+[de]!")
    assert r.starriness == 2
    assert r.repeated_character == from_regex("[de]")
    assert r.example_prefix == "abd"
    assert r.killer is None


def test_simple_repeat2():
    rs = found(r"\w*x0*\d*\.?\d\.?\d+4")
    assert len(rs)
    r = rs[0]
    assert r.starriness == 3
    assert r.repeated_character == from_regex("0")
    assert r.example_prefix == "x"
    assert r.killer is None


def test_simple_best_repeat():
    rs = found(r"\d*0*\d*x?\dx?\d+4")
    assert len(rs) > 1
    a = rs[0]
    assert a.starriness == 4
    assert a.repeated_character == from_regex("0")
    assert a.example_prefix == ""
    assert a.killer is None
    assert rs[1].starriness == 3


def test_backtrack():
    rs = found(r"[abc]+\w+[ab]+b")
    r = rs[0]
    assert r.starriness == 3
    assert len(r.redos_sequence) == 4
    assert r.killer == from_regex("[^b]")


def test_real_hbbtv():
    rs = found(
        r"(HbbTV)/[0-9]+\.[0-9]+\.[0-9]+ \([^;]*; *(LG)E *; *([^;]*) *;[^;]*;[^;]*;\)"
    )
    r = rs[0]
    assert r.starriness == 3
    assert len(r.redos_sequence) == 4
    assert r.repeated_character == from_regex(" ")
    assert r.example_prefix.startswith("HbbTV/")
    assert r.example_prefix.endswith("(;LGE;")


def test_real_branching():
    rs = [
        redos
        for redos in found(
            r"(HbbTV)/[0-9]+\.[0-9]+\.[0-9]+ \([^;]*; *(?:CUS:([^;]*)|([^;]+)) *; *([^;]*) *;.*;"
        )
        if redos.starriness >= 3
    ]
    assert all(r.starriness == 3 for r in rs)
    assert all(r.killer is None for r in rs)
    assert all(r.repeated_character == from_regex(" ") for r in rs)
    assert {r.example_prefix for r in rs} == {
        "HbbTV/0.0.0 (;CUS:;",
        "HbbTV/0.0.0 (;",
        "HbbTV/0.0.0 (;0;",
    }


def test_dollar():
    rs = found(r"^a+(b*b*b*)$")
    r = rs[0]
    assert r.starriness == 3
    assert r.repeated_character == from_regex(r"b")
    assert r.killer == from_regex(r"[^b]")


def test_real_cpython_cookielib():
    # We don't support the (?!) assertions, but can still find REDoS
    LOOSE_HTTP_DATE_RE = r"""^
        (\d\d?)            # day
           (?:\s+|[-\/])
        (\w+)              # month
            (?:\s+|[-\/])
        (\d+)              # year
        (?:
              (?:\s+|:)    # separator before clock
           (\d\d?):(\d\d)  # hour:min
           (?::(\d\d))?    # optional seconds
        )?                 # optional clock
           \s*
        ([-+]?\d{2,4}|(?![APap][Mm]\b)[A-Za-z]+)? # timezone
           \s*
        (?:\(\w+\))?       # ASCII representation of timezone in parens.
           \s*$"""
    rs = found(LOOSE_HTTP_DATE_RE, re.X)
    r = rs[0]
    assert r.starriness == 3
    assert r.repeated_character == from_regex(r"\s")
    assert r.killer == from_regex(r"[^\s]")


def test_real_cpython_cve():
    rs = found(r"(,*,)*(,+)[ \t]")
    r = rs[0]
    assert r.starriness == 12  # exponential


def test_real_ssri():
    rs = found(r"^([A-Za-z0-9+/=]{4})(\?[\x21-\x7E]*)*$")
    r = rs[0]
    assert r.starriness > 10
    assert r.repeated_character == from_regex(r"\?")
    assert r.example_prefix == "0000"
