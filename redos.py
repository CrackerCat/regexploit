from repeat import InfiniteRepeat
from char import Character
from sequence import Sequence

def find_redos(seq: Sequence):
    for i, elem in enumerate(seq.elements):
        # TODO branches
        if isinstance(elem, InfiniteRepeat) and (c := elem.overall_character_class()):
            yield from make_redos(seq, i, c, elem.starriness)
            
def make_redos(seq: Sequence, start: int, c: Character, starriness: int):
    # TODO branches
    for j, elem in enumerate(seq.elements[start:]):
        # And we're off
        if elem.minimum_length == 0:
            continue  # Don't care about (abc)?, but do care about (abc){3,6}
        new_c = c & elem.overall_character_class()
        print(c, '->', new_c)
        if new_c is None:
            # This element will force backtracking as it's incompatible with `c`
            return redos_found(seq, start, start + j, c, starriness)
        
        starriness += elem.starriness
        c = new_c
    
    # Everything matched, but we need to work backwards and find a 'killer' to cause backtracking
    # TODO

def redos_found(seq: Sequence, start: int, backtrack_at: int, repeated_character: Character, starriness: int):        
    # Try to include some optional parts (like `?`) just to make it nicer
    for elem in seq.elements[start:backtrack_at]:
        if elem.minimum_length == 0:
            if new_c := elem.overall_character_class() & repeated_character:
                repeated_character = new_c

    # Try to include some earlier characters just to make it nicer
    while start > 0:
        elem = seq.elements[start - 1]
        if elem.minimum_length > 0:
            if new_c := elem.overall_character_class() & repeated_character:
                if isinstance(elem, InfiniteRepeat):
                    return None  # Should already have been processed as a forward pass, so don't bother redoing it as it'll be a duplicate
                repeated_character = new_c
                starriness += elem.starriness
            else:
                break
        start -= 1

    # TODO grab earlier characters
    print(seq, start, backtrack_at, repeated_character, starriness)