from typing import List, Optional

from dataclasses import dataclass
from char import Character


@dataclass
class EndOfString:
    character: Optional[Character] = None

    @property
    def starriness(self):
        return 0

    @property
    def minimum_length(self):
        return 1  # Meaningless really here

    def overall_character_class(self):
        return self.character

    def __repr__(self) -> str:
        return f"${self.character}"

    def __and__(self, other: Character) -> Optional[Character]:
        return other & self.character

    def set_character(self, previous_elems: List):
        """
        To force backtracking, the dollar will have to not match any previous groups until a mandatory group.
        This can perhaps be made more lenient.
        """
        matcher = None
        for elem in reversed(previous_elems):
            if (c := elem.overall_character_class()):
                matcher |= c
            if elem.minimum_length > 0:
                self.character = matcher
                return
        self.character = None
