# The module records any regexes used by python code for later inspection.
# Import this hook before loading other modules or start python with `python -i /path/to/hook.py`
import re
import traceback

# By default, the re and traceback modules will not be hooked

regexes = set()


class CompiledRegex:
    def __init__(self, pattern, flags, traceback):
        self.pattern = pattern
        self.flags = flags
        self.traceback = traceback

    def __hash__(self) -> int:
        # ignore the traceback for now
        return hash((self.pattern, self.flags))

    def __repr__(self) -> str:
        return f"({self.pattern} at {self.last_tb.filename})"

    @property
    def last_tb(self):
        return self.traceback[-1]


def get_and_clear_regexes():
    while True:
        try:
            yield regexes.pop()
        except KeyError:
            return


def install():
    if not hasattr(re.compile, "_is_hook"):
        old_compile = re.compile

        def compile(pattern, flags=0):
            tb = traceback.extract_stack()[:-1]  # Ignore our hook
            regexes.add(CompiledRegex(pattern, flags, tb))
            return old_compile(pattern, flags)

        compile._is_hook = True
        re.compile = compile
