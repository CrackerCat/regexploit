#!/usr/bin/env python
import regexploit.hook

regexploit.hook.install()

import importlib
import pkgutil
import sys

from regexploit.ast.sre import SreOpParser
from regexploit.redos import find

# Load python modules and process regexes which are compiled on import by hooking re.compile


def main():
    def onerror(name):
        print("Cannot load", name)

    regexes_loaded = 0
    for p in pkgutil.walk_packages(sys.path, onerror=onerror):
        # Importing some modules is disruptive https://xkcd.com/353/
        if (
            p.name not in ("antigravity", "rstpep2html", "setup")
            and not p.name.startswith(("test", "pip", "setuptools", "idlelib", "rst2"))
            and not p.name.endswith(("__main__", ".main", ".conftest"))
            and ".test" not in p.name
        ):
            print(f"Importing {p.name}")
            try:
                importlib.import_module(p.name)
                hooked_regex: regexploit.hook.CompiledRegex
                for hooked_regex in regexploit.hook.get_and_clear_regexes():
                    regexes_loaded += 1
                    first_for_regex = True
                    parsed = SreOpParser.parse_sre(
                        hooked_regex.pattern, hooked_regex.flags
                    )
                    for redos in find(parsed):
                        if redos.starriness > 2:
                            if first_for_regex:
                                print(
                                    f"Vulnerable regex at {hooked_regex.last_tb.filename}, L{hooked_regex.last_tb.lineno}: {hooked_regex.last_tb.line}"
                                )
                                print(f"Pattern: {hooked_regex.pattern}")
                                first_for_regex = False
                            print(redos)
                            print(f"Starriness: {redos.starriness}")
                            print(f"Repeated character: {redos.repeated_character}")
                            if redos.killer:
                                print(
                                    f"Final character to cause backtracking: {redos.killer}"
                                )
                            print(f"Example: {redos.example()}\n")
            except Exception as e:
                print("Cannot load", p, e)
    print(f"Processed {regexes_loaded} regexes")


if __name__ == "__main__":
    main()
