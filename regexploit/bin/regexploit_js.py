#!/usr/bin/env python
import argparse
import os.path
import json
import subprocess
import sys
import traceback
import warnings

from glob import iglob
from itertools import islice

from regexploit.ast.sre import SreOpParser
from regexploit.redos import find
from regexploit.output.text import TextOutput


def handle_line_from_node(line: str, output: TextOutput):
    first_for_regex = True
    regex = json.loads(line)
    if pattern := regex.get("pattern"):
        filename = regex["filename"]
        try:
            parsed = SreOpParser.parse_sre(pattern)
        except:
            try:
                fixed = pattern.replace("[^]", "[\\^]")
                parsed = SreOpParser.parse_sre(fixed)
            except:
                print(f"Error parsing: {pattern} from {filename}\n")
                return
        output.next()
        try:
            for redos in find(parsed):
                if redos.starriness > 2:
                    output.record(redos, pattern, filename=filename)
        except Exception as e:
            print(f"Error finding REDoS: {pattern} from {filename}")
            print(traceback.format_exc())
    elif error := regex.get("error"):
        print("ERR", error, regex.get("filename"))


def process_files(filenames, nodejs_executable, output):
    args = [
        os.path.join(os.path.split(__file__)[0], "javascript", "index.js"),
        *filenames,
    ]
    if nodejs_executable:
        args = [nodejs_executable] + args
    node = subprocess.Popen(args, stdout=subprocess.PIPE, encoding="utf-8")
    while True:
        line = node.stdout.readline()
        if not line and node.poll() is not None:
            break
        if line:
            handle_line_from_node(line, output)
    rc = node.poll()
    return rc


def main():
    with warnings.catch_warnings():
        warnings.simplefilter(
            "ignore", category=FutureWarning
        )  # Some js regexes are weird
        parser = argparse.ArgumentParser(
            description="Parse regexes out of javascript files and scan them for REDoS"
        )
        parser.add_argument("files", nargs="+", help="Javascript or typescript files")
        parser.add_argument(
            "--node",
            help="Location of nodejs executable (rather than using node from PATH)",
        )
        parser.add_argument(
            "--glob", action="store_true", help="Glob the input filenames (**/*)"
        )
        args = parser.parse_args()

        output = TextOutput()
        files = (
            (fname for fglob in args.files for fname in iglob(fglob, recursive=True))
            if args.glob
            else iter(args.files)
        )
        while True:
            batch = []
            for _ in range(50):
                try:
                    batch.append(next(files))
                except StopIteration:
                    if batch:
                        process_files(batch, args.node, output)
                    return
            process_files(batch, args.node, output)
        print(f"Processed {output.regexes} regexes")


if __name__ == "__main__":
    main()
