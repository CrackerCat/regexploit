from dataclasses import dataclass
from typing import Any, List, Set, Tuple, Union, Optional

from char import Character

@dataclass(frozen=True)
class Repeat:
    repeat: Any
    minimum_repeats: int

    def example(self) -> str:
        if self.minimum_repeats == 0:
            return ""
        return self.repeat.example() * self.minimum_repeats
    
    @property
    def minimum_length(self) -> int:
        return self.minimum_repeats * self.repeat.minimum_length

    @property
    def starriness(self) -> int:
        return self.repeat.starriness  # ? and {1,30} are not that starry

    def exact_character_class(self) -> Optional[Character]:
        """
        Repeated character e.g. [bc] for [bc]*, or [a] for (aaa)*
        """
        return self.repeat.exact_character_class()

    def overall_character_class(self) -> Optional[Character]:
        """
        (\d23)+ -> None, (\d22)* -> 2
        """
        return self.repeat.overall_character_class()


@dataclass(frozen=True)
class InfiniteRepeat(Repeat):
    @property
    def starriness(self) -> int:
        return self.repeat.starriness + 1  # Starry +* :)


@dataclass(frozen=True)
class FiniteRepeat(Repeat):
    maximum_repeats: int