import unicodedata
import sre_constants
import sys
from enum import auto, Enum
from typing import Set


class Category(Enum):
    DIGIT = auto()
    NOT_DIGIT = auto()
    WORD = auto()
    NOT_WORD = auto()
    SPACE = auto()
    NOT_SPACE = auto()

    @property
    def is_negative(self) -> bool:
        return self.name.startswith('NOT_')

    def negate(self) -> "Category":
        if self.is_negative:
            return Category[self.name[4:]]
        else:
            return Category[f"NOT_{self.name}"]


def in_category(category: Category, literal: int):
    c = chr(literal)
    unicat = unicodedata.category(c)
    if category is Category.DIGIT:
        return unicat == 'Nd'
    if category is Category.NOT_DIGIT:
        return unicat != 'Nd'
    if category is Category.WORD:
        return unicat[0] == 'L'
    if category is Category.NOT_WORD:
        return unicat[0] != 'L'
    if category is Category.SPACE:
        return unicat == 'Zs' or c in (' ', '\n', '\t', '\r')
    if category is Category.NOT_SPACE:
        return unicat != 'Zs' and c not in (' ', '\n', '\t', '\r')


CATS = {}

def list_category(category, full_unicode: bool=False):
    if (cached := CATS.get(category)):
        yield from cached
    for data in range((sys.maxunicode + 1) if full_unicode else 256):
        c = chr(data)
        unicat = unicodedata.category(c)
        if category is Category.DIGIT:
            if unicat == 'Nd':
                yield data
        elif category is Category.NOT_DIGIT:
            if unicat != 'Nd':
                yield data
        elif category is Category.WORD:
            if unicat[0] == 'L':
                yield data
        elif category is Category.NOT_WORD:
            if unicat[0] != 'L':
                yield data
        elif category is Category.SPACE:
            if unicat == 'Zs' or c in (' ', '\n', '\t', '\r'):
                yield data
        elif category is Category.NOT_SPACE:
            if unicat != 'Zs' and c not in (' ', '\n', '\t', '\r'):
                yield data


def covers_any(categories: Set[Category]) -> bool:
    for c in categories:
        if c.is_negative and c.negate() in categories:
            return True
    return False


# CATS[sre_parse.CATEGORY_DIGIT] = list(list_category(sre_parse.CATEGORY_DIGIT))
# CATS[sre_parse.CATEGORY_SPACE] = list(list_category(sre_parse.CATEGORY_SPACE))
# CATS[sre_parse.CATEGORY_WORD] = list(list_category(sre_parse.CATEGORY_WORD))
EXAMPLE_FOR_CAT = {
    Category.DIGIT: '4',
    Category.NOT_DIGIT: '!',
    Category.WORD: 'w',
    Category.NOT_WORD: '$',
    Category.SPACE: ' ',
    Category.NOT_SPACE: '.',
}