import sre_constants
from dataclasses import dataclass
from typing import Iterator, List, Optional, Set, Tuple


@dataclass(frozen=True)
class Range:
    min_val: int
    max_val: int


def _get_from_range_buffer(buf):
    if len(buf) == 1:
        return (sre_constants.LITERAL, buf[0])
    else:
        return (sre_constants.RANGE, (buf[0], buf[-1]))


def make_ranges(literals):
    buf = []
    for lit in sorted(literals):
        if len(buf) and buf[-1] != lit - 1:
            yield _get_from_range_buffer(buf)
            buf = [lit]
        else:
            buf.append(lit)
    if buf:
        yield _get_from_range_buffer(buf)


def lits_to_ranges(
    literals: Iterator[int],
) -> Tuple[Optional[Set[int]], Optional[Set[Range]]]:
    lits = set()
    ranges = set()
    buf: List[int] = []
    for lit in sorted(literals):
        if len(buf) and buf[-1] != lit - 1:
            # Discontinuity
            if len(buf) == 1:
                lits.add(buf[0])
            else:
                ranges.add(Range(buf[0], buf[-1]))
            buf = [lit]
        else:
            buf.append(lit)

    if len(buf) == 1:
        lits.add(buf[0])
    elif len(buf) > 1:
        ranges.add(Range(buf[0], buf[-1]))

    return lits if lits else None, ranges if ranges else None
